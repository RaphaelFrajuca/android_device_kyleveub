From 1e7c3092453258460a58e672c2bf5c653373a328 Mon Sep 17 00:00:00 2001
From: Xiao-Long Chen <chenxiaolong@cxl.epac.to>
Date: Mon, 18 Aug 2014 02:33:29 +0200
Subject: [PATCH] Settings: App 2SD Add app moving setting to the menu in
 Settings -> Apps

Change-Id: I631436d1978da16a9ea72330fc912f78bae195c4
---
 res/values/cm_strings.xml                         |    9 +++
 .../settings/applications/ManageApplications.java  |   82 ++++++++++++++++----
 2 files changed, 78 insertions(+), 13 deletions(-)

diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 883bdab..dbccdb3 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -752,4 +752,13 @@
     <string name="time_ten_to">Ten till</string>
     <string name="time_five_to">Five till</string>
 
+    <!-- App moving -->
+    <string name="app_moving_enable">Enable app moving</string>
+    <string name="app_moving_disable">Disable app moving</string>
+    <string name="app_moving_reboot_title">Reboot now?</string>
+    <string name="app_moving_reboot_enabled_desc">Successfully enabled application moving.\n\nThe device needs to be rebooted for the setting to take effect.</string>
+    <string name="app_moving_reboot_disabled_desc">Successfully disabled application moving.\n\nThe device needs to be rebooted for the setting to take effect.</string>
+    <string name="app_moving_reboot_now_button">Reboot now</string>
+    <string name="app_moving_reboot_later_button">Reboot later</string>
+
 </resources>
diff --git a/src/com/android/settings/applications/ManageApplications.java b/src/com/android/settings/applications/ManageApplications.java
index 4286189..934f2d5 100644
--- a/src/com/android/settings/applications/ManageApplications.java
+++ b/src/com/android/settings/applications/ManageApplications.java
@@ -41,6 +41,7 @@ import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;
 import android.os.IBinder;
+import android.os.PowerManager;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.UserHandle;
@@ -77,6 +78,7 @@ import com.android.settings.Settings.StorageUseActivity;
 import com.android.settings.applications.ApplicationsState.AppEntry;
 import com.android.settings.deviceinfo.StorageMeasurement;
 import com.android.settings.Utils;
+import com.android.internal.util.slim.AppMoving;
 
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -144,6 +146,7 @@ public class ManageApplications extends Fragment implements
     private static final String EXTRA_SORT_ORDER = "sortOrder";
     private static final String EXTRA_SHOW_BACKGROUND = "showBackground";
     private static final String EXTRA_DEFAULT_LIST_TYPE = "defaultListType";
+    private static final String EXTRA_REBOOT_DIALOG = "rebootDialog";
     private static final String EXTRA_RESET_DIALOG = "resetDialog";
 
     // attributes used as keys when passing values to InstalledAppDetails activity
@@ -169,8 +172,10 @@ public class ManageApplications extends Fragment implements
     public static final int SORT_ORDER_SIZE = MENU_OPTIONS_BASE + 5;
     public static final int SHOW_RUNNING_SERVICES = MENU_OPTIONS_BASE + 6;
     public static final int SHOW_BACKGROUND_PROCESSES = MENU_OPTIONS_BASE + 7;
-    public static final int RESET_APP_PREFERENCES = MENU_OPTIONS_BASE + 8;
-    public static final int SHOW_PROTECTED_APPS = MENU_OPTIONS_BASE + 9;
+    public static final int APP_MOVING_ENABLE = MENU_OPTIONS_BASE + 8;
+    public static final int APP_MOVING_DISABLE = MENU_OPTIONS_BASE + 9;
+    public static final int RESET_APP_PREFERENCES = MENU_OPTIONS_BASE + 10;
+    public static final int SHOW_PROTECTED_APPS = MENU_OPTIONS_BASE + 11;
 
     // sort order
     private int mSortOrder = SORT_ORDER_ALPHA;
@@ -338,7 +343,7 @@ public class ManageApplications extends Fragment implements
                 if (mContainerService != null) {
                     try {
                         final long[] stats = mContainerService.getFileSystemStats(
-                                Environment.getExternalStorageDirectory().getPath());
+                                Environment.getExternalAppsVolumeDirectory().getPath());
                         mTotalStorage = stats[0];
                         mFreeStorage = stats[1];
                     } catch (RemoteException e) {
@@ -366,13 +371,13 @@ public class ManageApplications extends Fragment implements
                     }
                 }
 
-                final boolean emulatedStorage = Environment.isExternalStorageEmulated();
+                final boolean externalApps = Environment.isExternalAppsAvailableAndMounted();
                 if (mApplications != null) {
                     final int N = mApplications.getCount();
                     for (int i=0; i<N; i++) {
                         ApplicationsState.AppEntry ae = mApplications.getAppEntry(i);
                         mAppStorage += ae.codeSize + ae.dataSize;
-                        if (emulatedStorage) {
+                        if (!externalApps) {
                             mAppStorage += ae.externalCodeSize + ae.externalDataSize;
                         }
                     }
@@ -466,6 +471,7 @@ public class ManageApplications extends Fragment implements
     private View mRootView;
     private ViewPager mViewPager;
 
+    AlertDialog mRebootDialog;
     AlertDialog mResetDialog;
 
     class MyPagerAdapter extends PagerAdapter
@@ -608,8 +614,8 @@ public class ManageApplications extends Fragment implements
             if (DEBUG) Log.i(TAG, "Rebuilding app list...");
             ApplicationsState.AppFilter filterObj;
             Comparator<AppEntry> comparatorObj;
-            boolean emulated = Environment.isExternalStorageEmulated();
-            if (emulated) {
+            boolean externalApps = Environment.isExternalAppsAvailableAndMounted();
+            if (!externalApps) {
                 mWhichSize = SIZE_TOTAL;
             } else {
                 mWhichSize = SIZE_INTERNAL;
@@ -620,7 +626,7 @@ public class ManageApplications extends Fragment implements
                     break;
                 case FILTER_APPS_SDCARD:
                     filterObj = ApplicationsState.ON_SD_CARD_FILTER;
-                    if (!emulated) {
+                    if (externalApps) {
                         mWhichSize = SIZE_EXTERNAL;
                     }
                     break;
@@ -873,7 +879,7 @@ public class ManageApplications extends Fragment implements
                 LIST_TYPE_DOWNLOADED, this, savedInstanceState);
         mTabs.add(tab);
 
-        if (!Environment.isExternalStorageEmulated()) {
+        if (Environment.isExternalAppsAvailableAndMounted()) {
             tab = new TabInfo(this, mApplicationsState,
                     getActivity().getString(R.string.filter_apps_onsdcard),
                     LIST_TYPE_SDCARD, this, savedInstanceState);
@@ -922,6 +928,10 @@ public class ManageApplications extends Fragment implements
             ((PreferenceFrameLayout.LayoutParams) rootView.getLayoutParams()).removeBorders = true;
         }
 
+        if (savedInstanceState != null && savedInstanceState.getBoolean(EXTRA_REBOOT_DIALOG)) {
+            buildRebootDialog();
+        }
+
         if (savedInstanceState != null && savedInstanceState.getBoolean(EXTRA_RESET_DIALOG)) {
             buildResetDialog();
         }
@@ -962,6 +972,9 @@ public class ManageApplications extends Fragment implements
             outState.putInt(EXTRA_DEFAULT_LIST_TYPE, mDefaultListType);
         }
         outState.putBoolean(EXTRA_SHOW_BACKGROUND, mShowBackground);
+        if (mRebootDialog != null) {
+            outState.putBoolean(EXTRA_REBOOT_DIALOG, true);
+        }
         if (mResetDialog != null) {
             outState.putBoolean(EXTRA_RESET_DIALOG, true);
         }
@@ -979,6 +992,12 @@ public class ManageApplications extends Fragment implements
     @Override
     public void onStop() {
         super.onStop();
+
+        if (mRebootDialog != null) {
+            mRebootDialog.dismiss();
+            mRebootDialog = null;
+        }
+
         if (mResetDialog != null) {
             mResetDialog.dismiss();
             mResetDialog = null;
@@ -1049,10 +1068,14 @@ public class ManageApplications extends Fragment implements
                 .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
         menu.add(0, SHOW_BACKGROUND_PROCESSES, 3, R.string.show_background_processes)
                 .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
-        menu.add(0, RESET_APP_PREFERENCES, 4, R.string.reset_app_preferences)
+		menu.add(0, APP_MOVING_ENABLE, 4, R.string.app_moving_enable)
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
+        menu.add(0, APP_MOVING_DISABLE, 5, R.string.app_moving_disable)
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
+        menu.add(0, RESET_APP_PREFERENCES, 6, R.string.reset_app_preferences)
                 .setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
         if (!Utils.isRestrictedProfile(getActivity())) {
-            menu.add(0, SHOW_PROTECTED_APPS, 5, R.string.protected_apps)
+            menu.add(0, SHOW_PROTECTED_APPS, 7, R.string.protected_apps)
                     .setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
         }
         updateOptionsMenu();
@@ -1091,6 +1114,8 @@ public class ManageApplications extends Fragment implements
             mOptionsMenu.findItem(SORT_ORDER_SIZE).setVisible(false);
             mOptionsMenu.findItem(SHOW_RUNNING_SERVICES).setVisible(showingBackground);
             mOptionsMenu.findItem(SHOW_BACKGROUND_PROCESSES).setVisible(!showingBackground);
+            mOptionsMenu.findItem(APP_MOVING_ENABLE).setVisible(false);
+            mOptionsMenu.findItem(APP_MOVING_DISABLE).setVisible(false);
             mOptionsMenu.findItem(RESET_APP_PREFERENCES).setVisible(false);
             if (!Utils.isRestrictedProfile(getActivity())) {
                 mOptionsMenu.findItem(SHOW_PROTECTED_APPS).setVisible(true);
@@ -1101,6 +1126,8 @@ public class ManageApplications extends Fragment implements
             mOptionsMenu.findItem(SORT_ORDER_SIZE).setVisible(mSortOrder != SORT_ORDER_SIZE);
             mOptionsMenu.findItem(SHOW_RUNNING_SERVICES).setVisible(false);
             mOptionsMenu.findItem(SHOW_BACKGROUND_PROCESSES).setVisible(false);
+            mOptionsMenu.findItem(APP_MOVING_ENABLE).setVisible(!AppMoving.isEnabled());
+            mOptionsMenu.findItem(APP_MOVING_DISABLE).setVisible(AppMoving.isEnabled());
             mOptionsMenu.findItem(RESET_APP_PREFERENCES).setVisible(true);
             if (!Utils.isRestrictedProfile(getActivity())) {
                 mOptionsMenu.findItem(SHOW_PROTECTED_APPS).setVisible(true);
@@ -1108,6 +1135,22 @@ public class ManageApplications extends Fragment implements
         }
     }
 
+    void buildRebootDialog() {
+        if (mRebootDialog == null) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+            builder.setTitle(R.string.app_moving_reboot_title);
+            if (AppMoving.isEnabled()) {
+                builder.setMessage(R.string.app_moving_reboot_enabled_desc);
+            } else {
+                builder.setMessage(R.string.app_moving_reboot_disabled_desc);
+            }
+            builder.setPositiveButton(R.string.app_moving_reboot_now_button, this);
+            builder.setNegativeButton(R.string.app_moving_reboot_later_button, null);
+            mRebootDialog = builder.show();
+            mRebootDialog.setOnDismissListener(this);
+        }
+    }
+
     void buildResetDialog() {
         if (mResetDialog == null) {
             AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
@@ -1122,7 +1165,9 @@ public class ManageApplications extends Fragment implements
 
     @Override
     public void onDismiss(DialogInterface dialog) {
-        if (mResetDialog == dialog) {
+        if (mRebootDialog == dialog) {
+            mRebootDialog = null;
+        } else if (mResetDialog == dialog) {
             mResetDialog = null;
         }
     }
@@ -1130,7 +1175,12 @@ public class ManageApplications extends Fragment implements
 
     @Override
     public void onClick(DialogInterface dialog, int which) {
-        if (mResetDialog == dialog) {
+        if (mRebootDialog == dialog) {
+            mRebootDialog = null;
+            PowerManager pm = (PowerManager)
+                    getActivity().getSystemService(Context.POWER_SERVICE);
+            pm.reboot(null);
+        } else if (mResetDialog == dialog) {
             final PackageManager pm = getActivity().getPackageManager();
             final IPackageManager mIPm = IPackageManager.Stub.asInterface(
                     ServiceManager.getService("package"));
@@ -1217,6 +1267,12 @@ public class ManageApplications extends Fragment implements
             if (mCurTab != null && mCurTab.mRunningProcessesView != null) {
                 mCurTab.mRunningProcessesView.mAdapter.setShowBackground(true);
             }
+        } else if (menuId == APP_MOVING_ENABLE) {
+            AppMoving.setEnabled(true);
+            buildRebootDialog();
+        } else if (menuId == APP_MOVING_DISABLE) {
+            AppMoving.setEnabled(false);
+            buildRebootDialog();
         } else if (menuId == RESET_APP_PREFERENCES) {
             buildResetDialog();
         } else if (menuId == SHOW_PROTECTED_APPS) {
-- 
1.7.9.5

